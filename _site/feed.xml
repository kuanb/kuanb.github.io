<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kuan Butts</title>
    <description>Personal web page of Kuan Butts.</description>
    <link>http://kuanbutts.com/</link>
    <atom:link href="http://kuanbutts.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>A fresh personal site</title>
        <description>&lt;p&gt;Hello. This is a new blog for kuanbutts.com. Prior posts from my old blog (which was not run off Jekyll or any other sort of static web site builder), have been included &amp;ldquo;below&amp;rdquo; this post. Posts &amp;ldquo;after&amp;rdquo; this post will be those for the new posts. I will adjust the dates of entry on the transitioned older posts to try and retain some chronological order, but consider this a friendly warning that things might get messy!&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Jun 2015 08:31:19 -0400</pubDate>
        <link>http://kuanbutts.com/jekyll/pixyll/2015/06/22/fresh-site/</link>
        <guid isPermaLink="true">http://kuanbutts.com/jekyll/pixyll/2015/06/22/fresh-site/</guid>
      </item>
    
      <item>
        <title>I won!</title>
        <description>&lt;p&gt;&lt;em&gt;Warning: This is an older blog post. I am including it just for posterity, and in the interest of just keeping all my old writing from my &amp;ldquo;earlier&amp;rdquo; days.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As mentioned in my last post, I was working on the &lt;a href=&quot;http://datacanvas.org/sense-your-city/&quot;&gt;Sense Your City&lt;/a&gt; competition hosted by Data Canvas. The results are in and I won the Marker Prize. That means two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I didn&amp;rsquo;t actually win the really attractive grand prize which included a couple flights all over the world and something around $3,000.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That said, I did still nab $500 and a nice little ego boost, so I think I&amp;rsquo;ll take it. It isn&amp;rsquo;t $500 to spend wherever I want, though. It has to be spent, it sounds like, at a website called SeeedStudio. That seems like plenty to play with, though, and I think it would be cool to buy a Raspberry Pi and maybe take my first stab at something in that vein of tinkering.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the two grand prize winners, Urban Heartbeat, has a really cool project up over at &lt;a href=&quot;http://urban-heartbeat.net/&quot;&gt;their website&lt;/a&gt;. It involves a sort of audio interpretation of the data each sensor is producing. It&amp;rsquo;s pretty fun; I suggest checking it out.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Mar 2015 08:31:19 -0400</pubDate>
        <link>http://kuanbutts.com/2015/03/28/sense-your-city-win/</link>
        <guid isPermaLink="true">http://kuanbutts.com/2015/03/28/sense-your-city-win/</guid>
      </item>
    
      <item>
        <title>Sense your city</title>
        <description>&lt;p&gt;&lt;em&gt;Warning: This is an older blog post. I am including it just for posterity, and in the interest of just keeping all my old writing from my &amp;ldquo;earlier&amp;rdquo; days.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been tinkering on a submission to the &lt;a href=&quot;http://datacanvas.org/sense-your-city/&quot;&gt;Sense Your City&lt;/a&gt; competition hosted by Data Canvas. I hope I got the attributions right. It seems to be some Swissnex data art challenge, the ultimate goal of which is not entirely clear. Nevertheless, I thought that the data was potentially interesting - or at least fun to play with. Plus, it was an easy break from coding for Skyrise all day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kuanbutts.com/images/_posts/datacanvas.png&quot; alt=&quot;voronoi&quot;&gt;&lt;/p&gt;

&lt;p&gt;My final product is called &amp;ldquo;&lt;a href=&quot;http://kuanbutts.com/dataCanvas/&quot;&gt;Weather+&lt;/a&gt;&amp;rdquo; and you can check it out &lt;a href=&quot;http://kuanbutts.com/dataCanvas/&quot;&gt;here&lt;/a&gt;. Github guts for the project can be found &lt;a href=&quot;https://github.com/kuanb/dataCanvas&quot;&gt;here&lt;/a&gt;, as well.&lt;/p&gt;

&lt;p&gt;Without getting too heady on the idea, the basic concept is that, in the future, you get all of these environmental factors that you care about besides the weather. In fact, today, we have this with humidity and the like. The goal was simply to allow one to explore each of these aspects on a single object. By rolling the cursor to the different corners of the hexagon, they toggle the different variables being measured. Because, in theory, ubiquitous sensors would allow for a more granular approach, the result of rolling over a variable would also render a map that would sort of be like a more zoomed in regional weather map. This I have created with a heat map on the right side that visualizes that variable geospatially. Credit for that component of the mini tool goes to Daniel Palencia, who helped me on this.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 08:31:19 -0400</pubDate>
        <link>http://kuanbutts.com/2015/03/19/sense-your-city/</link>
        <guid isPermaLink="true">http://kuanbutts.com/2015/03/19/sense-your-city/</guid>
      </item>
    
      <item>
        <title>State of things</title>
        <description>&lt;p&gt;&lt;em&gt;Warning: This is a really old blog post. I am including it just for posterity, and in the interest of just keeping all my old writing from my &amp;ldquo;earlier&amp;rdquo; days.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It occured to me that I haven&amp;rsquo;t updated this since Hacker School. I figure I ought to mention that another 3 months of coding full time has allowed me to progress significantly further. Hopefully I will have time to write down my thoughts more often in the coming months. At present, I have been workign crazy hours on Skyrise (the splash screen, as it currently stands, is screep captured in the below image). This was my first experience deploying an application on Heroku and I&amp;rsquo;ve got much to learn in that realm.&lt;/p&gt;

&lt;p&gt;A brief recap of what I have done and learned in the past few months might be worth including. I learned and have diven deep into Angular, as well as have built out what is at this point a pretty fully featured Django application. While I understood, in principle, REST frameworks in the past, I didn&amp;rsquo;t understand them enough to implement them successfully. So, in the beginning, this Django app was essentially serving up single pages. As I became more comfortable with perfoming in page API calls, I (and Vito, who I have been working on this project with and who is another Hacker Schooler) have begun to include more and RESTful framework functionality. One upside to this is some single page web application functionality is now in place throughout the application. Hence, of course, the use of Angular throughout.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Mar 2015 08:31:19 -0400</pubDate>
        <link>http://kuanbutts.com/2015/03/10/state-of-things/</link>
        <guid isPermaLink="true">http://kuanbutts.com/2015/03/10/state-of-things/</guid>
      </item>
    
      <item>
        <title>Mongoose configuration</title>
        <description>&lt;p&gt;&lt;em&gt;Warning: This is a really old blog post. I am including it just for posterity, and in the interest of just keeping all my old writing from my &amp;ldquo;earlier&amp;rdquo; days.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A curious problem stumped me for a bit yesterday. Of course, once I brought it up with another Hacker Schooler, it was quickly resolved. This &amp;lsquo;skill&amp;rsquo; of just asking people right away when an issue arises and not being embarassed to do so is something I am only beginning to warm up to and something that I wish I was more proactive at doing earlier on in my Hacker School career. The issue had to do with &lt;code&gt;user.save&lt;/code&gt;. For some reason, when using &lt;code&gt;req.user&lt;/code&gt;.save, I was unable to add to the existing &lt;code&gt;userSchema&lt;/code&gt;. Although I couldn&amp;rsquo;t add or remove anything from the existing user, I could modify existing parameters. For example, I was able to change a &amp;ldquo;premium&amp;rdquo; parameter Boolean from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. I was able up update user&amp;rsquo;s listed email addresses as well using &lt;code&gt;user.save&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to &amp;ldquo;add&amp;rdquo; parameters to the user, though, I needed to use a different command. Vito, another Hacker School (now called Recurse Center) peer, helped me find it via Mongoose&amp;rsquo;s documentation. There, it suggests the method of &lt;code&gt;User.findOneAndUpdate()&lt;/code&gt;. Using this method, you introduce a parameter to search by (I used &lt;code&gt;_id&lt;/code&gt; since it&amp;rsquo;s a unqiue identified in MongoDB) and then you feed it the element to modify, and then define a callback function.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOneAndUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updatedUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;profile.ejs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updatedUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Project added successfully.&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Above is a snippet from my code that demonstrates this &lt;code&gt;User.findOneAndUpdate()&lt;/code&gt; in action, with the callback function and render action defined within.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Dec 2014 07:31:19 -0500</pubDate>
        <link>http://kuanbutts.com/2014/12/04/mongoose/</link>
        <guid isPermaLink="true">http://kuanbutts.com/2014/12/04/mongoose/</guid>
      </item>
    
      <item>
        <title>Gulp and Mocha</title>
        <description>&lt;p&gt;The purpose of this is to document the main point from some code review I received today. I am building a backend MongoDB database (as prior mentioned) for Flocktracker. One key comment made was that iteration efficiency would be drammatically increased if I were to employ Gulp + Mocha. I knew vaguely what Gulp was and nothing as to Mocha. I was able to learn about both via this &lt;a href=&quot;http://ellengummesson.com/blog/2014/01/06/getting-started-with-gulp/&quot;&gt;excellent blog&lt;/a&gt;. I found this of merit as their is very little documentation on the use of these two libraries in conjunction. The primary component I found very confusing was how to get Mocha to run. But first I should explain further what Gulp and Mocha are.&lt;/p&gt;

&lt;p&gt;Gulp, as I understand it, is a build system that essentially automates redundant tasks. What is a build system? Good question; I barely understand. So beyond automating tasks that are repetitive, another way of thinking about it is through an example. On the Canvas project I worked on last week, it was useful in my pairing partner&amp;rsquo;s project because he was using Node libraries and needed to compile them to a web-ready format in order to test it in his browser. As a result, instead of having to run that everytime he wanted to check out his latest build, he automated the task via Gulp. For me, as I am building out this web application, I need to constantly reload the server and then click through to the area I am fixing or otherwise tweaking. While this is good for UI-related tweaks, it is really slow and inefficient for building the backend logic. This is where Mocha comes in handy. With Gulp, I can create a piping method (a stream of commands, one after another) that prepare the appropriate files, and then I can run Mocha on them. Mocha then runs through the various Express 4.0 &lt;code&gt;app.get&lt;/code&gt; and &lt;code&gt;app.put&lt;/code&gt; commands I have (along with other logic I am feeding it, and makes sure that they work. If they do, it print a green check in the terminal and if they do not, it can then highlight those problem functions. This lets me find and highlight issue points much more quickly than through manual iteration - what I had been doing prior. Hopefully, this will dramatically improve my workflow and help me stay focused during the development process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kuanbutts.com/images/_posts/mocha_output.png&quot; alt=&quot;mocha_output&quot;&gt;&lt;/p&gt;

&lt;p&gt;Above is a screen capture of the output generated from running a Gulp file that pipes a &lt;code&gt;src&lt;/code&gt; folder&amp;rsquo;s contents to Mocha to be evaluated. Included is a simple function &lt;code&gt;add&lt;/code&gt; that simple adds to variables. Clearly, more elaborate tests can be devised to test logic of processes in the backend.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Dec 2014 07:31:19 -0500</pubDate>
        <link>http://kuanbutts.com/2014/12/02/gulp-and-mocha/</link>
        <guid isPermaLink="true">http://kuanbutts.com/2014/12/02/gulp-and-mocha/</guid>
      </item>
    
      <item>
        <title>Ray tracing</title>
        <description>&lt;p&gt;&lt;em&gt;Warning: This is a really old blog post. I am including it just for posterity, and in the interest of just keeping all my old writing from my &amp;ldquo;earlier&amp;rdquo; days.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today I wanted to move from two dimensions to three. I had done an asteroids game recently and wanted to see if I could devise a small project to take myself into the third dimension. The result was my working through a really fantastic tutorial by &lt;a href=&quot;https://github.com/tmcw/literate-raytracer&quot;&gt;Tom MacWright&lt;/a&gt;, a crazy accomplished programmer at MapBox (an equally crazily-accomplished company). If your browser is acting up when the planets are spinning or you&amp;rsquo;re on an ancient computer that can&amp;rsquo;t handle all the junk I dump on this blog, you can &lt;a href=&quot;http://kuanbutts.com/blog/embed/space/index.html&quot;&gt;open it in its own window and play it there&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;embed src=&quot;http://kuanbutts.com/blog/embed/space/index.html&quot; style=&quot;width:100%;height:350px&quot;&gt;&lt;/embed&gt;&lt;/p&gt;

&lt;p&gt;This project helped me become far more familiar with the concepts of ray tracing. Essentially, you are reverse projecting vectors from a single point (the camera) and observing instances at which the vector ray intersects an object in space (or light element). If it does, it can also recurse into itself (theoretically, infinitely), to observe elements that are in the path of the resultant reflected vector. By doing so for each projection in the screen plane (a plane sitting in front of the camera at a distance that allows for a single point to equal one pixel, which is then multiplied in size to handle screen sizes of greater resolution). More on how this works is outlined, in fantastic detail, on MacWright&amp;rsquo;s blog.&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Nov 2014 07:31:19 -0500</pubDate>
        <link>http://kuanbutts.com/2014/11/25/ray-tracing/</link>
        <guid isPermaLink="true">http://kuanbutts.com/2014/11/25/ray-tracing/</guid>
      </item>
    
      <item>
        <title>Super Simple Asteroids Game</title>
        <description>&lt;p&gt;&lt;em&gt;Warning: This is a really old blog post. I am including it just for posterity, and in the interest of just keeping all my old writing from my &amp;ldquo;earlier&amp;rdquo; days.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I wrote a super simple Asteroids game, under 450 lines of code yesterday. The purpose was just to play around with Canvas and do something that was more visual. After a week of MongoDB, one can yearn for the tactile nature of the web browser and the comfort of knowing you can see something to reward you for your efforts. The game is embedded below and ready to play, though I know the space bar in Chrome causes all sorts of problems. Ultimately, if your browser is acting up when the game is playing, you can &lt;a href=&quot;http://kuanbutts.com/blog/embed/asteroids/index.html&quot;&gt;open it in its own window and play it there&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;embed src=&quot;http://kuanbutts.com/blog/embed/asteroids/index.html&quot; style=&quot;width:100%;height:350px&quot;&gt;&lt;/embed&gt;&lt;/p&gt;

&lt;p&gt;I wouldn&amp;rsquo;t say its tremendously &amp;lsquo;playable.&amp;rsquo; The game is effectively one function and, upon clicking to play, simply begins running. One interesting method I employed was not tying the performance of the ships speed to the browser. Instead, I make each space item, be it the ship, a laser, or an asteroid; and call them space objects. Each object keeps track of the time between when it is at the moment and when it was last called. When it is its turn to be updated, it calculates that delta of time and multiples that by its given speed attribute to determine distance changed for the redraw. I based this method of a helpful tutorial from this blog. The code for my Asteroids game &lt;a href=&quot;https://github.com/kuanb/asteroids&quot;&gt;lies in this repo&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Nov 2014 07:31:19 -0500</pubDate>
        <link>http://kuanbutts.com/2014/11/25/asteroids/</link>
        <guid isPermaLink="true">http://kuanbutts.com/2014/11/25/asteroids/</guid>
      </item>
    
      <item>
        <title>Initial foray into Leaflet with D3</title>
        <description>&lt;p&gt;&lt;em&gt;Warning: This is a really old blog post. I am including it just for posterity, and in the interest of just keeping all my old writing from my &amp;ldquo;earlier&amp;rdquo; days.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m trying to make a voronoi diagram. Just to get going, I used Citi Bike&amp;rsquo;s station data (they have 332 stations and I just took the live JSON feed to get each of their locations, by parsing through the data with d3&amp;rsquo;s &lt;code&gt;d3.json()&lt;/code&gt; capability. Currently, I am failing and getting very far into this project. I&amp;rsquo;ve got it working in a static instance, but I can&amp;rsquo;t get it to dynamically update. I want to figure that out by the end of the day, ideally. To keep the map from freaking out, I have disabled all panning and zoom functionality in the below example. (Update: I just replaced it with an image for now, since there is no point in using the map generation at the moment, given the panning doesn&amp;rsquo;t work.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kuanbutts.com/images/_posts/citibike_station_voronoi.png&quot; alt=&quot;voronoi&quot;&gt;&lt;/p&gt;

&lt;p&gt;At present, the map, as you can see, produces the diagram correctly in a static state. I&amp;rsquo;ve understood (learned) how SVG sort of injects itself inside of a layer that Leaflet creates that sits just above the maps layer. Now I need for it to dynamically grab the L.circle objects that are locating the Citi Bike stations and recalculate their new x and y coordinates each time the map is moved. There is this code, that was on a few other Leaflet projects &lt;code&gt;map.on(&amp;#39;load moveend&amp;#39;, revise())&lt;/code&gt; that unforuntately keeps returning a type error to me. Clearly, this is no good and is next on my to-debug list. At the moment though, I am going to need to switch gears and revisit this later in the evening.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Nov 2014 07:31:19 -0500</pubDate>
        <link>http://kuanbutts.com/2014/11/21/foray-into-leaflet-and-d3/</link>
        <guid isPermaLink="true">http://kuanbutts.com/2014/11/21/foray-into-leaflet-and-d3/</guid>
      </item>
    
      <item>
        <title>Node notes</title>
        <description>&lt;p&gt;&lt;em&gt;Warning: This is a really old blog post. I am including it just for posterity, and in the interest of just keeping all my old writing from my &amp;ldquo;earlier&amp;rdquo; days.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to include a first entry on my foray into Node, which began just over a week ago when Chase Lambert, another Hacker Schooler in my batch, suggested I try it over Django. Since he is an MIT CS grad, I take every word he says as Truth, and follow it blindly. All joking aside, the guy seems to be beyond brilliant, so I figured what the hell, I&amp;rsquo;ll try Node. His argument was that Django does too much magic, and in many ways is becoming antiquated given the state of web frameworks. I&amp;rsquo;d been working on Flask prior (well, dabbling at best) which was why I initially thought that Django might be some sort of logical next step. Node.js would also mean that I would get to work with MongoDB, something I had touched about 8-10 months ago, or so, but had not returned to, having been thoroughly confused. Back then, though, I was totally unaquainted with JSON and the like, and now it seems so much more familiar and accessible.&lt;/p&gt;

&lt;p&gt;I followed a few valuable tutorials, namely Christopher Buecheler&amp;rsquo;s The Dead-Simple Step-by-Step Guide for Front-End Developers to Getting Up and Running with Node.JS, Express, Jade, and MongoDB. Yeah, it&amp;rsquo;s quite a mouthful, but it&amp;rsquo;s definitely worth the read and work. There is a second set of tutorials after that one, and a third which is linked at the bottom that is made by one of the commenters after Christopher suggested working out a post method for the web app that you create through those two tutorials. Honestly, this tutorial accounts for 90% of the framework I developed currently for Flocktracker&amp;rsquo;s backend. I&amp;rsquo;ve sort of just adapted the work I did through these.&lt;/p&gt;

&lt;p&gt;The project is (sort of) hosted on GitHub, though I haven&amp;rsquo;t really been pushing my work onto GitHub much. The dependencies used are Mongoose, EJS, Passport, BCrypt, and Express. I&amp;rsquo;ll go through them and explain what each is, as I understand in my limited capacity, and why I am using it. Mongoose makes saving to MongoDB easier. You can go to the site and learn in detail, but it seems that, for me, I create a sort of user schema that defines the structure of each object (I think they call them documents) in MongoDB. This basically gives each of these a default structure and those are the components you are then able to interface with later (usernames, emails, Google authentication, etc.). EJS is a method of using a client side server to stick HTML into a page. The cool aspect of this is that the user essentially goes to one window and then, when they start certain routes in the URL, the server listens and send a response render that plops HTML on the screen. The extra cool feature of this is since the HTML is rendered then, you can do this with specific, say, user information. So the HTML can say &amp;ldquo;Hello, Kuan!&amp;rdquo; if the user logged in is named Kuan. Passport is the authentication middleware that handles authentication (using BCrypt) for Node. So, whenever you want to do something with a user&amp;rsquo;s page, for example, before you run the EJS render action, you shoot the route query through Passport and it returns you a thumbs up (a res object) or a thumbs down (an error and accompanying message).&lt;/p&gt;

&lt;p&gt;I guess my next post can go into how these are implemented in more detail (i.e. let&amp;rsquo;s get some code blocks onto this blog).&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Nov 2014 07:31:19 -0500</pubDate>
        <link>http://kuanbutts.com/2014/11/20/node-notes/</link>
        <guid isPermaLink="true">http://kuanbutts.com/2014/11/20/node-notes/</guid>
      </item>
    
  </channel>
</rss>
